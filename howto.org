* Misc
** code-folding
*** hs-minor-mode ?
** display ivan/whatever function as i/whatever
** mouse in terminal
*** fixed?
** check if use-package is installed, and if not load package.el and install use-package
** lazy load package.el
*** This? (use-package package :defer)
** scroll inactive frame without changing state of status bars
** semantic layer in spacemacs
** aggressive-indent-mode
** what does ido c-k do?
** visit recent file
** sql beautify
** reorg windows (split vert vs horiz)
** whitespace faces
** smooth scrolling with external mouse wheel
** set bash indentation to 2 spaces
** switch other window to its previous buffer
** reformat text (like vim gq)
** scroll offset to 1 line
** partial line completion (cursor to end of line)
** line numbers toggle
** ctags (etags?)
** completion (word/line/path)
*** TAB (or M-TAB if tab-always-indent is t)
*** find-file-at-point
*** hippie-expand
** colorize ansi sgr codes (e.g. when viewing log file)
*** tty-format.el ?
** refresh color theme
** color past eof
** color past 90 chars
** backward-kill-word (C-w) in insert/minibuffer
** add flyspell-prog-mode to prog-mode-hook
** use framesets or winner-mode to replace vim-like tabs
** auto-indent as you type
** minibuffer curly-brace completion hints (ido ?)
** minibuffer inc-search autoaccept
** fringe color same as background
** folding
** open newline below, from mid-line
** swap window positions
** mimic prev/next line chars (like C-e/C-y in vim)
** toggle between alt files (header/implementation/test/etc)
** open a file/buffer in other window
** replace in region without activating region
** single space after sentence
** make switch-to-buffer select other frame if it's visible there
*** ido-mode does this. how can I do it outside of ido-mode?
** Zoom window
** use-package :ensure keyword
** byte-compile init file
** page-break lines in C-h m
** org correctly apply theme (monospace) to "#+BEGIN_SRC" lines
** org insert sibling above
** org insert subheading below
** make a nice startup buffer like spacemacs does (evil-motion-state, they're not even using initial-buffer-choice to do it; how do they do it?)
** acccess system clipboard
** cycle kill ring in evil-mode
*** Normal state: C-p / C-n following a paste
*** Insert state: ???
** bind M-s-h in emacs-plus
** set 'fullscreen' frame-parameter to 'fullscreen' or 'fullboth'
** manage ruby versions (rbenv)
*** rbenv.el? exec-path-from-shell?
** run tests asynchronously
** launch emacs client from command line with "e"
** Use isearch string for query-replace
   I like to use isearch in order to test my query string/regexp/word before running a query-replace. How can I start query-replace from within isearch?
   : M-%

** Jump to previous location like C-o
   How can I jump to the previous location like `Ctrl-o` does in Vim?
   : C-u C-SPC

** Go to next/previous paragraph
   How can I jump to the next paragraph like } in Vim?
   : forward-paragraph ("M-}") / backward-paragraph  ("M-{")

** Submit minibuffer C-r search result with a single Return
   How can I make "C-r" in the minibuffer act like it does in the shell, where hitting Enter not only accepts the search result, but also executes it?
   #+BEGIN_SRC emacs-lisp
    (defun ivan/isearch-exit ()
      "Run isearch-exit, and if in the minibuffer, submit the search result as input."
      (interactive)
      (isearch-exit)
      (if (minibuffer-window-active-p (selected-window))
          (minibuffer-complete-and-exit)))

    (setq ivan/remapped-isearch-exit nil)

    (defun ivan/remap-isearch-exit ()
      (unless ivan/remapped-isearch-exit
        (setq ivan/remapped-isearch-exit t)
        (define-key
          overriding-terminal-local-map [remap isearch-exit] #'ivan/isearch-exit)))

    (add-hook 'isearch-mode-hook #'ivan/remap-isearch-exit)
   #+END_SRC
** Conveniently create parent directories for new file
   How can I easily create non-existent parent directories for a new buffer/file?
   #+BEGIN_SRC emacs-lisp
    (defun ivan/create-non-existent-directory ()
      (let ((parent-directory (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p parent-directory))
                   (y-or-n-p (format "Directory ‘%s’ does not exist! Create it?" parent-directory)))
          (make-directory parent-directory :mkdir_p))))

    (add-to-list 'find-file-not-found-functions 'ivan/create-non-existent-directory)
   #+END_SRC

** Toggle regexp in isearch
   How can I toggle regexp searching within isearch?
   : M-r

** Make Dired listings concise
   How can I make Dired display fewer file details?
   : dired-hide-details-mode

** Nice org-mode bullets
   How can I make the bullets in org-mode look nicer?
   Use [[https://github.com/sabof/org-bullets][org-bullets]] and configure like so:
   #+BEGIN_SRC emacs-lisp
   (setq org-bullets-bullet-list '("◉" "○" "•"))
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

** Kill windows
   How can I kill the current window? What about the other window?
   delete-window:
   : C-x 0
   delete-other-windows:
   : C-x 1

** Indent with spaces
   How do I control whether Emacs indents with spaces or tabs?
   : (setq indent-tabs-mode nil)

** Toggle highlighting current line
   How can I toggle ~hl-line-mode~ in the current buffer?
   First, avoid using ~global-hl-line-mode~, as it interferes with toggling highlighting locally.
   Instead, selectively apply ~hl-line-mode~ using hooks.
   : (add-hook 'prog-mode-hook #'hl-line-mode)
   Then, bind a key to ~hl-line-mode~.
   : (bind-key "M-…" 'hl-line-mode) ; (⌥⌘;)

** Variables refusing to update
   I was tweaking the values of some color variables in a theme I use, but reloading the theme didn't pick up the new values. What gives?
   Variables defined with ~defvar~ are resistant to re-evaluation. Restarting Emacs will make the changes show up.

** Place cursor on beginning of match result
   How can I place the cursor on the beginning of the match result rather than the end when performing isearch?
    #+BEGIN_SRC emacs-lisp
    (defun ivan/goto-match-beginning ()
      (when (and isearch-forward isearch-other-end
                (not isearch-mode-end-hook-quit))
        (goto-char isearch-other-end)))

    (add-hook 'isearch-mode-end-hook #'ivan/goto-match-beginning)
    #+END_SRC

** Indent current line/region
   How do I indent the current line or region?
   : TAB

** Hide scroll bars
   How do I hide the scrollbars?
   : (scroll-bar-mode 0)

** Kill this buffer
   How do I kill the current buffer?
   : C-x k RET

** Case insensitive buffer completion
   How can I make buffer name completion case insensitive?
   : (setq read-buffer-completion-ignore-case  t)

** Select a rectangular region
   How can I select a rectangular region?
   : C-SPC C-x SPC

** Use minibuffer history effectively
   How can I effectively recall previous commands in the Emacs minibuffer?
   : C-r

** Resize windows
   How can I conveniently resize windows horizontally/vertically?
   Install [[https://github.com/grammati/windsize][windsize]] and bind the following keys:
    #+BEGIN_SRC emacs-lisp
    (bind-keys ("C-S-<left>"  . windsize-left)
               ("C-S-<right>" . windsize-right)
               ("C-S-<up>"    . windsize-up)
               ("C-S-<down>"  . windsize-down))
    #+END_SRC

** Move point to middle/top/bottom of window
   How do I move the point to the middle/top/bottom of the window?
   : M-r

* Keybindings
** find sensible solutions for C-a, C-e, C-y, 0, $ in evil-mode
*** evil-numbers suggests C-c + C-c -
** reconcile ⌘ key
*** ⌘q :: should quit; don't want to start associating it with other commands as I'd likely start hitting it accidentally outside of emacs; inside emacs there's a confirmation to help avoid accidental quits
*** ⌘s :: use <Space>fs in evil-mode, but  ⌘s otherwise
*** ⌘w :: bind to delete-window; use  ⌘c or evil-yank for copying to kill-ring
*** ⌘o :: bind to find-file; face-menu isn't so useful
*** ⌘h :: use ⌘ as meta and /don't/ use option key as super -- this, along with mac-pass-command-to-system, let's emacs-mac pass ⌘h and ⌥⌘h to os
** bind C-w to backward-kill-word when region inactive (or maybe just when in evil insert state?)
** toggle isearch case-fold on the fly?
** get C-RET working in org mode
* Packages
** which-key | guide-key
** multiple-cursors / multi-cursor
** magit
** expand-region
** smartparens
** Undo-tree
** company
** ag
** visual-regexp
** visual-regexp-steroids
** flycheck
** Winner-mode
** projectile
** f
** req-package
** rainbow-delimiters
** powerline (rewrite)
** Ivy-mode | Swiper | Counsel
** Helm | ido-vertical-mode | flx-ido
** idle-highlight-mode
** find-file-in-project
** reconcile C-<return> | S-<return> with Org-mode bindings
** Cedit
** https://github.com/Dewdrops/powerline
** expand-region
* Evil-mode
** visual block with live updating like rectangle-mark-mode string-rectangle
*** should I just use rectangle-mark-mode instead?
*** is there a package that augments this?
** C-u in insert mode? (maybe C-x C-u from insert state)
*** evil-want-C-u-scroll provides something similar outside of Insert state. maybe something like that
** evil-args
** evil-leader
*** how to  retain SPC / Shift-SPC in help buffers (timeout?)
** keybindings
*** use U for redo, C-r (in normal state) for isearch-backward-regexp
** hybrid mode?
* Questions
** What are the different load-paths for?
*** /Users/ivan/.emacs.d/elpa/...
*** /usr/local/share/emacs/site-lisp/...
*** /usr/local/Cellar/emacs-mac/emacs-24.5-z-mac-5.18/share/emacs/24.5/lisp/...
** how should i confugure (use-package :config, add-hooks, etc.)
*** ediff
** why are the rgb colors off from what they claim?
** why did I have to change from "#ffffff" to "white" to get terminal to show a white background?
** why does the rectangular-region persist in an empty state after a command?
** will auto-revert be noticeably detrimental to performance?
