* Misc
** prevent autoindentation (upon newline) from leaving trailing whitespace on empty lines
*** repro: within indented text, `o' to open a new line in insert mode, insert text on that line, hit enter to open a newline, then escape out of insert mode. Rather than clearing the indentation and leaving an empty line, it leaves indentation whitespace.
** toggle results buffer with C-SPC (magnetic)
*** temporarily maximize magnetic-window?
** etags
*** generate tags automatically
How can I keep an up-to-date etags file located in the $GIT_DIR of each project?
Git hooks: https://github.com/ivanbrennan/dotfiles/blob/master/git/templates/hooks/etags
*** have emacs automatically find it
** gtags
*** exclude certain languages and filepaths
Since gtags doesn't pass command-line options down to its ctags backend, how can I exclude certain languages, filetypes and directories from the tags it generates?
Add ~--languages~ and ~--exclude~ settings to ~/.ctags
*** better handle partial matches
*** activate it automatically
*** scroll down to actual results in results window automatically
*** bind to M-.
**** only display results buffer when multiple results
It's already doing that!
**** when multiple results (and called without prefix arg)
***** don't auto-jump to first result
***** select results window
**** when multiple results and called with prefix arg
***** behave as if there was only one result (i.e. jump to it, don't display results window)
** ruby/rails
*** rspec
**** let <return> run compile-goto-error even in evil mode
Compilation buffers normally bind ~<return>~ to ~compile-goto-error~. In evil normal state, I want both ~<return>~ and ~C-m~ to run ~evil-next-line-first-non-blank~, so I've explicitly bound them,
#+begin_src elisp
(use-package evil
  ;; ...
  (:map evil-normal-state-map
        ("<return>" . evil-next-line-first-non-blank)
        ("C-m"      . evil-next-line-first-non-blank)
        ;; ...
#+end_src
This overrides the ~compile-goto-error~ behavior in compilation buffers, which I actually don't want to do. How can I get these keys to run ~evil-next-line-first-non-blank~ normally, but ~compile-goto-error~ in compilation buffers?
Don't bind ~<return>~ to ~evil-next-line-first-non-blank~, bind only ~C-m~. That yields the desired behavior on both keys in both circumstances.
**** auto-save
*** inf-ruby
**** get it working
**** get completion working
*** robe & company
*** rake
**** run rake command from any buffer within the project, not just root
** semantic (for smart completion)
** smartparens bindings
** M-S-o for fuzzy finder
*** turn on ivy-mode for 1 command?
** paste transient state
** search utils
*** ag.el
**** hide file-local variables (top of compilation buffer)
: #'ivan/present-search-results
**** omit leading whitespace in results text
**** navigate between results, line :cnext, :cprev
**** hitting Return in the results buffer should go to result in a different window, leaving the results window as is.
: (setq ag-reuse-window nil) ;; this is the default
**** cycle between various results buffers
** highlight/unhighlight transient state
** */# symbol navigation transient state like in Spacemacs
** expand-region transient state like in Spacemacs
** paste transient state
** error transient-state on ~SPC e~
** don't show minor-mode lighters in the modeline, and instead provide a toggle to pop up a window indicating which minor-modes are enabled; should be easy to dismiss, like which-key
** change magit popup hints to sort vertically
** project-wide search and replace
*** helm-ag ?
** ~/.emacs.d/init_bash.sh
** error list hydra (e.g. M-g n/p)
** fix broken bindings access (e.g. M-o) from evil-bound hydra
If a hydra is bound to an evil map, it seems to lose awareness of non-evil bindings that aren't hydra heads. For example, with
#+begin_src
  (bind-keys ("M-o" . find-file)
  (evil-define-key 'normal global-map (kbd "SPC .") 'hydra-scroll/body)
#+end_src
I'll enter hydra-scroll (~SPC .~), scroll around, decide to open a file, type ~M-o~ while still in the hydra, and be told ~M-o~ is undefined. If I explicitly exit the hydra, I then regain access to ~M-o~. What gives?
** Xref
** Project (built-in package; is it like Projectile?)
** use alt-w / alt-b to move by subwords like sublime vintage-mode
** ag keybindings
** how does spacemacs keep ~g~ bound to `revert-buffer` in dired?
** make undo-tree and goto-chg cooperate when saving undo history
*** if undo-tree-auto-save-history is non-nil, saving triggers undo-tree-save-history
*** undo-tree-save-history calls undo-list-transfer-to-tree, which empties the undo-list into a tree that's saved
*** this leaves nothing in the undo-list for goto-last-change to work with
*** but undo-tree-undo also calls undo-list-transfer-to-tree so why doesn't every undo break goto-last-change ?
** error-list micro-state (use just n and p to jump through errors list)
*** check out hydra
** make sure magit rebase keys are working
** code-folding
*** hs-minor-mode ?
** display ivan/whatever function as i/whatever
** mouse in terminal
*** fixed?
** check if use-package is installed, and if not load package.el and install use-package
** lazy load package.el
*** This? (use-package package :defer)
** scroll inactive frame without changing state of status bars
** semantic layer in spacemacs
** aggressive-indent-mode
** what does ido c-k do?
** visit recent file
** sql beautify
** reorg windows (split vert vs horiz)
** whitespace faces
** smooth scrolling with external mouse wheel
** set bash indentation to 2 spaces
** switch other window to its previous buffer
** reformat text (like vim gq)
** scroll offset to 1 line
** partial line completion (cursor to end of line)
** line numbers toggle
** ctags (etags?)
** completion (word/line/path)
*** TAB (or M-TAB if tab-always-indent is t)
*** find-file-at-point
*** hippie-expand
** colorize ansi sgr codes (e.g. when viewing log file)
*** tty-format.el ?
** refresh color theme
** color past eof
** color past 90 chars
** backward-kill-word (C-w) in insert/minibuffer
** add flyspell-prog-mode to prog-mode-hook
** use framesets or winner-mode to replace vim-like tabs
** auto-indent as you type
** layouts like in spacemacs?
** minibuffer curly-brace completion hints (ido ?)
** minibuffer inc-search autoaccept
** fringe color same as background
** folding
** open newline below, from mid-line
** swap window positions
** mimic prev/next line chars (like C-e/C-y in vim)
** toggle between alt files (header/implementation/test/etc)
** open a file/buffer in other window
** replace in region without activating region
** single space after sentence
** make switch-to-buffer select other frame if it's visible there
*** ido-mode does this. how can I do it outside of ido-mode?
** Zoom window
** use-package :ensure keyword
** byte-compile init file
** page-break lines in C-h m
** org correctly apply theme (monospace) to "#+begin_src" lines
** org insert sibling above
** org insert subheading below
** make a nice startup buffer like spacemacs does (evil-motion-state, they're not even using initial-buffer-choice to do it; how do they do it?)
** acccess system clipboard
** cycle kill ring in evil-mode
*** Normal state: C-p / C-n following a paste
*** Insert state: ???
** bind M-s-h in emacs-plus
** set 'fullscreen' frame-parameter to 'fullscreen' or 'fullboth'
** manage ruby versions (rbenv)
*** rbenv.el? exec-path-from-shell?
** run tests asynchronously
** launch emacs client from command line with "e"
** run emacs in a client/server style
** Access help keys within isearch
Some help keys don't behave as expected within isearch. For example, if I enter isearch and type ~C-h c M-r~, Emacs says the key is bound to move-to-window-line-top-bottom, which is true outside of isearch, but not within isearch, where it is instead bound to isearch-toggle-regexp.
Some of the help keys are different in isearch (i.e. some will exit isearch before triggering help). To see which help keys are available, from within isearch, type ~C-h C-h~.

** Leave search results highlighted after exiting isearch
Occasionally I want the search results to remain highlighted after I exit isearch. How can I do this?
From within isearch, ~M-s h r~ (highlight-regexp). To clear the highlight, run unhighlight-regexp.

** Use isearch string for query-replace
I like to use isearch in order to test my query string/regexp/word before running a query-replace. How can I start query-replace from within isearch?
: M-%

** Jump to previous location like C-o
How can I jump to the previous location like `Ctrl-o` does in Vim?
: C-u C-SPC

** Go to next/previous paragraph
How can I jump to the next paragraph like } in Vim?
: forward-paragraph ("M-}") / backward-paragraph  ("M-{")

** Submit minibuffer C-r search result with a single Return
How can I make "C-r" in the minibuffer act like it does in the shell, where hitting Enter not only accepts the search result, but also executes it?
#+begin_src emacs-lisp
  (defun ivan/isearch-exit ()
    "Run isearch-exit, and if in the minibuffer, submit the search result as input."
    (interactive)
    (isearch-exit)
    (if (minibuffer-window-active-p (selected-window))
        (minibuffer-complete-and-exit)))

  (setq ivan/remapped-isearch-exit nil)

  (defun ivan/remap-isearch-exit ()
    (unless ivan/remapped-isearch-exit
      (setq ivan/remapped-isearch-exit t)
      (define-key
        overriding-terminal-local-map [remap isearch-exit] #'ivan/isearch-exit)))

  (add-hook 'isearch-mode-hook #'ivan/remap-isearch-exit)
#+end_src
** Conveniently create parent directories for new file
How can I easily create non-existent parent directories for a new buffer/file?
#+begin_src emacs-lisp
  (defun ivan/create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory ‘%s’ does not exist! Create it?" parent-directory)))
        (make-directory parent-directory :mkdir_p))))

  (add-to-list 'find-file-not-found-functions 'ivan/create-non-existent-directory)
#+end_src

** Toggle regexp in isearch
How can I toggle regexp searching within isearch?
: M-r

** Make Dired listings concise
How can I make Dired display fewer file details?
: dired-hide-details-mode
Toggle it in a dired buffer with ~(~, and if you want it on by default,
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
#+end_src

** Nice org-mode bullets
How can I make the bullets in org-mode look nicer?
Use [[https://github.com/sabof/org-bullets][org-bullets]] and configure like so:
#+begin_src emacs-lisp
  (setq org-bullets-bullet-list '("◉" "○" "•"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Kill windows
How can I kill the current window? What about the other window?
delete-window:
: C-x 0
delete-other-windows:
: C-x 1

** additional text objects like in spacemacs
** Indent with spaces
How do I control whether Emacs indents with spaces or tabs?
: (setq indent-tabs-mode nil)

** Toggle highlighting current line
How can I toggle ~hl-line-mode~ in the current buffer?
First, avoid using ~global-hl-line-mode~, as it interferes with toggling highlighting locally.
Instead, selectively apply ~hl-line-mode~ using hooks.
: (add-hook 'prog-mode-hook #'hl-line-mode)
Then, bind a key to ~hl-line-mode~.
: (bind-key "M-…" 'hl-line-mode) ; (⌥⌘;)

** Variables refusing to update
I was tweaking the values of some color variables in a theme I use, but reloading the theme didn't pick up the new values. What gives?
Variables defined with ~defvar~ are resistant to re-evaluation. Restarting Emacs will make the changes show up.

** Place cursor on beginning of match result
How can I place the cursor on the beginning of the match result rather than the end when performing isearch?
#+begin_src emacs-lisp
  (defun ivan/goto-match-beginning ()
    (when (and isearch-forward isearch-other-end
              (not isearch-mode-end-hook-quit))
      (goto-char isearch-other-end)))

  (add-hook 'isearch-mode-end-hook #'ivan/goto-match-beginning)
#+end_src

** Indent current line/region
How do I indent the current line or region?
: TAB

** Hide scroll bars
How do I hide the scrollbars?
: (scroll-bar-mode 0)

** Kill this buffer
How do I kill the current buffer?
: C-x k RET

** Case insensitive buffer completion
How can I make buffer name completion case insensitive?
: (setq read-buffer-completion-ignore-case  t)

** Select a rectangular region
How can I select a rectangular region?
: C-SPC C-x SPC

** Use minibuffer history effectively
How can I effectively recall previous commands in the Emacs minibuffer?
: C-r

** Resize windows
How can I conveniently resize windows horizontally/vertically?
Install [[https://github.com/grammati/windsize][windsize]] and bind the following keys:
#+begin_src emacs-lisp
  (bind-keys ("C-S-<left>"  . windsize-left)
             ("C-S-<right>" . windsize-right)
             ("C-S-<up>"    . windsize-up)
             ("C-S-<down>"  . windsize-down))
#+end_src

** Move point to middle/top/bottom of window
How do I move the point to the middle/top/bottom of the window?
: M-r

* Keybindings
** ag project, ag current default directory, ag arbitrary directory
** vim-like bindings in package list
** TAB in info and package list to jump to next link
** find sensible solutions for C-a, C-e, C-y, 0, $ in evil-mode
*** evil-numbers suggests C-c + C-c -
** reconcile ⌘ key
*** ⌘q :: should quit; don't want to start associating it with other commands as I'd likely start hitting it accidentally outside of emacs; inside emacs there's a confirmation to help avoid accidental quits
*** ⌘s :: use <Space>fs in evil-mode, but  ⌘s otherwise
*** ⌘w :: bind to delete-window; use  ⌘c or evil-yank for copying to kill-ring
*** ⌘o :: bind to find-file; face-menu isn't so useful
*** ⌘h :: use ⌘ as meta and /don't/ use option key as super -- this, along with mac-pass-command-to-system, let's emacs-mac pass ⌘h and ⌥⌘h to os
** bind C-w to backward-kill-word when region inactive (or maybe just when in evil insert state?)
** toggle isearch case-fold on the fly?
** get C-RET working in org mode
* Packages
** evil-indent-plus, evil-args, evil-exchange, evil-visual-star
** eyebrowse, persp-mode, wconf
** lispy
** git-time-machine
** dired-details
** peep-dired
** ranger
** which-key
** multiple-cursors / multi-cursor
** iedit
** pcre2el
** evil-lisp-state
** magit
** expand-region
** smartparens
** Undo-tree
** company
** visual-regexp
** visual-regexp-steroids
** flycheck
** Winner-mode
** projectile
** f
** req-package
** rainbow-delimiters
** powerline (rewrite)
*** byte compile
** Ivy-mode | Swiper | Counsel
** Helm | ido-vertical-mode | flx-ido
** idle-highlight-mode
** find-file-in-project
** reconcile C-<return> | S-<return> with Org-mode bindings
** Cedit
** https://github.com/Dewdrops/powerline
** expand-region
* Evil-mode
** visual block with live updating like rectangle-mark-mode string-rectangle
*** should I just use rectangle-mark-mode instead?
*** is there a package that augments this?
** C-u in insert mode? (maybe C-x C-u from insert state)
*** evil-want-C-u-scroll provides something similar outside of Insert state. maybe something like that
** evil-args
** evil-leader
*** how to  retain SPC / Shift-SPC in help buffers (timeout?)
** keybindings
*** use U for redo, C-r (in normal state) for isearch-backward-regexp
** hybrid mode?
* Doom wants
** install fonts from https://github.com/domtronn/all-the-icons.el/tree/master/fonts
#+begin_src
cd ~/Library/Fonts
for font in all-the-icons \
            file-icons    \
            fontawesome   \
            octicons      \
            weathericons
do
  if [ ! -e "${font}.ttf" ]; then
    curl -O "https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/fonts/${font}.ttf"
  fi
done
#+end_src
** persistent cursor position (across emacs sessions)
** autoload use-package
** that awesome modeline
*** install fontawesome
#+begin_src
brew update
brew tap caskroom/fonts
brew cask install font-fontawesome
#+end_src
*** do I need to do this?
: (set-charset-priority 'unicode)

** different background color for file-buffers
** little cursor-line flash upon jumps
** mode-line flash upon error
** confirm-kill-emacs
** invisible or hollow cursor in neotree
** hide mode-line in neotree window
** navigate neotree quickly (e.g. pop up a level, up out of an opened fold, etc.)
** wrap my head around all the core-popup stuff
* Questions
** What are the different load-paths for?
*** /Users/ivan/.emacs.d/elpa/...
*** /usr/local/share/emacs/site-lisp/...
*** /usr/local/Cellar/emacs-mac/emacs-24.5-z-mac-5.18/share/emacs/24.5/lisp/...
** how should i confugure (use-package :config, add-hooks, etc.)
*** ediff
** why are the rgb colors off from what they claim?
** why did I have to change from "#ffffff" to "white" to get terminal to show a white background?
** why does the rectangular-region persist in an empty state after a command?
** will auto-revert be noticeably detrimental to performance?
